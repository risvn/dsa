=================================**graphs**=================================

g=(v,e)
graph are of two types directed and undirected

self-loop: if both edge points are same
mult-edge: if it occurs more than once
ex:cities with flight roots

simple-graphs: no multi-edge,no self-loop
max no edges in dir graph 0<=|E|<=n(n-1)
max no edges in undir graph 0<=|E|<=n(n-1)\2

dense-> to many edges
parse-> to few edges

path/walk: a seq of vertices where each adj pair is connected by an edge
path(simple-path) : a walk in which no vertices (and thus no edges) are repeated
trail: a walk in which no edges are repeated

========================Depth First Search Algorithm========================

A standard DFS implementation puts each vertex of the graph into one of two categories:

Visited
Not Visited
The purpose of the algorithm is to mark each vertex as visited while avoiding cycles.

The DFS algorithm works as follows:

Start by putting any one of the graph's vertices on top of a stack.
Take the top item of the stack and add it to the visited list.
Create a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the top of the stack.
Keep repeating steps 2 and 3 until the stack is empty.

source:https://www.programiz.com/dsa/graph-dfs

